#!/usr/bin/bc -l

e = e(1)
pi = 4 * a(1)

define flr(x) # "borrowed" from Wikipedia
{
	auto tmp
	tmp = scale
	scale = 0
	x /= 1
	scale = temp
	return(x)
}

define exp(x, y)
{
	return (e(y * l(x)))
}

define log(x, y)
{
	auto z
	z = x / y
	for (i = 1; z > 1; i++) {
		z = z / y
	}
	return (i)
}

define nrt(x, y)
{
	return(exp(x, (1 / y)))
}

phi = (1 + sqrt(5)) / 2

define fact(x) # Doing recursion would be a lot simpler, but also a lot slower
{
	auto res
	res = 1
	if (x <= 0) {
		return 0
	}
	
	if (x > 0) {
		for (i = 1; i <= x; ++i) {
			res = res * i
		}
		return res
	}
}
